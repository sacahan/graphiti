# FalkorDB Basic Examples Environment Configuration Template
# Copy this file to .env and customize the values

# =============================================================================
# REQUIRED: LLM Configuration
# =============================================================================

# OpenAI API Key (Required)
OPENAI_API_KEY=your_openai_api_key_here

# Primary model for complex tasks (optional - defaults shown)
# MODEL_NAME=gpt-4.1-mini

# Lightweight model for simple tasks (optional)
# SMALL_MODEL_NAME=gpt-4.1-nano

# Embedding model (optional)
# EMBEDDER_MODEL_NAME=text-embedding-3-small

# =============================================================================
# DATABASE: FalkorDB Configuration
# =============================================================================

# Database type (required for FalkorDB)
GRAPHITI_DB_TYPE=falkordb

# FalkorDB connection URL
FALKORDB_URL=redis://localhost:6379

# FalkorDB database name (optional)
# GRAPHITI_DB_NAME=graphiti_db

# FalkorDB authentication (if required)
# FALKORDB_PASSWORD=your_falkordb_password

# =============================================================================
# PERFORMANCE OPTIMIZATION
# =============================================================================

# Concurrency limit (FalkorDB optimized)
SEMAPHORE_LIMIT=20

# =============================================================================
# APPLICATION SETTINGS
# =============================================================================

# Default group ID for episodes (optional)
# GROUP_ID=falkordb-examples

# Custom entity extraction (optional - requires OPENAI_API_KEY)
# USE_CUSTOM_ENTITIES=true

# Logging level
LOG_LEVEL=INFO

# =============================================================================
# MCP SERVER SETTINGS (for mcp_server_example.py)
# =============================================================================

# MCP server host
MCP_SERVER_HOST=localhost

# MCP server port
MCP_SERVER_PORT=8000

# Force unbuffered Python output for containers
# PYTHONUNBUFFERED=1

# =============================================================================
# ALTERNATIVE LLM PROVIDERS (Optional)
# =============================================================================

# Anthropic Claude
# ANTHROPIC_API_KEY=your_anthropic_key

# Google Gemini
# GOOGLE_API_KEY=your_google_key

# Groq
# GROQ_API_KEY=your_groq_key

# Azure OpenAI
# AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com
# AZURE_OPENAI_API_KEY=your_azure_key
# AZURE_OPENAI_API_VERSION=2023-12-01-preview

# =============================================================================
# DOCKER DEPLOYMENT (Optional)
# =============================================================================

# Container resource limits and settings
# These are automatically used when running in Docker containers

# Database connection for containers (use service names)
# FALKORDB_URL=redis://falkordb:6379

# Container-optimized settings
# SEMAPHORE_LIMIT=25
# LOG_LEVEL=WARNING
# MCP_SERVER_HOST=0.0.0.0

# =============================================================================
# DEVELOPMENT vs PRODUCTION PRESETS
# =============================================================================

# For Development (copy these settings):
# GRAPHITI_DB_TYPE=falkordb
# FALKORDB_URL=redis://localhost:6379
# OPENAI_API_KEY=sk-...
# LOG_LEVEL=DEBUG
# SEMAPHORE_LIMIT=15

# For Production (copy these settings):
# GRAPHITI_DB_TYPE=falkordb
# FALKORDB_URL=redis://prod-falkordb:6379
# OPENAI_API_KEY=sk-...
# MODEL_NAME=gpt-4.1-mini
# SEMAPHORE_LIMIT=30
# LOG_LEVEL=INFO
# USE_CUSTOM_ENTITIES=true
# GROUP_ID=production

# For Memory-Constrained Environment:
# GRAPHITI_DB_TYPE=falkordb
# SEMAPHORE_LIMIT=10
# MODEL_NAME=gpt-4.1-nano
# USE_CUSTOM_ENTITIES=false

# =============================================================================
# USAGE NOTES
# =============================================================================

# 1. OPENAI_API_KEY is required for most functionality
# 2. Start FalkorDB: docker run -d --name falkordb -p 6379:6379 falkordb/falkordb:latest
# 3. Test connection: redis-cli -p 6379 ping
# 4. Run examples: python basic_usage.py
# 5. Performance targets: <5s startup, <200MB memory, <1s operations