apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphiti-mcp
  namespace: graphiti
  labels:
    app.kubernetes.io/name: graphiti-mcp
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: graphiti-mcp
spec:
  replicas: 2 # Scale based on your needs
  selector:
    matchLabels:
      app.kubernetes.io/name: graphiti-mcp
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: graphiti-mcp
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: graphiti-mcp
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: graphiti-mcp
          image: graphiti-mcp:falkordb # Update with your registry/image
          ports:
            - containerPort: 8000
              name: http
          envFrom:
            - configMapRef:
                name: graphiti-config
            - secretRef:
                name: graphiti-secrets
          args:
            - "--transport"
            - "sse"
          livenessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 45
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /status
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1024Mi"
              cpu: "1000m"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false # Required for Python temporary files
      securityContext:
        fsGroup: 1000

---
apiVersion: v1
kind: Service
metadata:
  name: graphiti-mcp-service
  namespace: graphiti
  labels:
    app.kubernetes.io/name: graphiti-mcp
    app.kubernetes.io/component: api
spec:
  type: ClusterIP # Change to LoadBalancer or NodePort for external access
  ports:
    - port: 8000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: graphiti-mcp
    app.kubernetes.io/component: api

---
# Optional: Ingress for external access
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: graphiti-mcp-ingress
#   namespace: graphiti
#   labels:
#     app.kubernetes.io/name: graphiti-mcp
#     app.kubernetes.io/component: ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
#     nginx.ingress.kubernetes.io/ssl-redirect: "true"
#     cert-manager.io/cluster-issuer: letsencrypt-prod  # If using cert-manager
# spec:
#   # tls:
#   #   - hosts:
#   #       - graphiti-mcp.yourdomain.com
#   #     secretName: graphiti-mcp-tls
#   rules:
#     - host: graphiti-mcp.yourdomain.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: graphiti-mcp-service
#                 port:
#                   number: 8000
